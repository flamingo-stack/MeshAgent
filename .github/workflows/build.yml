name: Tactical RMM Agent Build and Push Latest

permissions:
  contents: write
  packages: write
  actions: write
  pull-requests: write
  attestations: write
  id-token: write

on:
  push:
    branches: [master, feature/agent-ci]
    paths-ignore:
      - "**/*.md"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release (e.g., v1.2.3)"
        required: true
        type: string

env:
  REGISTRY: "ghcr.io"
  ORGANISATION: ${{ github.repository_owner }}
  REPOSITORY: ${{ github.event.repository.name }}

# =============================================================================
# JOBS
# =============================================================================

jobs:
  build_client:
    name: "Build C Client (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    if: |
      github.event_name == 'push'
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            os_arch: amd64
##            artifact_name: rmmagent-windows-amd64.exe
##          - os: windows-latest
##            os_arch: 386
##            artifact_name: rmmagent-windows-i386.exe
##          - os: macos-latest
##            os_arch: arm64
##            artifact_name: meshagent_osx-arm-64
#          - os: macos-latest
#            os_arch: [arm64, amd64]
#            artifact_name: rmmagent-mac-universal
#          - os: macos-latest
#            go_os: darwin
#            os_arch: arm64
#            artifact_name: rmmagent-mac-arm64
#          - os: macos-latest
#            go_os: darwin
#            os_arch: amd64
#            artifact_name: rmmagent-mac-amd64
#          - os: ubuntu-latest
#            target: x86_64-unknown-linux-gnu
#            artifact_name: openframe-oss-client-linux-x64
         
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

#      - name: Prepare Build tools
#        uses: actions/setup-go@v5
#        with:
#          go-version: '1.20.13'


      - name: Prepare Build tools
        uses: microsoft/setup-msbuild@v1.1

      - name: Compile agent for ${{ matrix.go_os }}
        run: msbuild MeshAgent-2022.sln /p:Configuration=Release

#      - name: Compile agent for ${{ matrix.go_os }}
#        run: |
#          if [[ "${{ matrix.go_os }}" == "darwin" ]]; then
#            rm -rf ./build_target
#            mkdir -p ./build_target
#            architectures=($(echo '${{ toJSON(matrix.os_arch) }}' | jq -r '.[]'))
#            for arch in "${architectures[@]}"; do
#              echo "Building for ${{ matrix.go_os }}/${arch}"
#              env CGO_ENABLED=0 GOOS=${{ matrix.go_os }} GOARCH=${arch} go build -ldflags "-s -w" -o "./build_target/rmmagent-mac-${arch}"
#            done
#            echo "Create rmmagent-mac-universal package"
#            lipo -create ./build_target/rmmagent-mac-amd64 ./build_target/rmmagent-mac-arm64 -output "${{ matrix.artifact_name }}"
#            lipo -info "${{ matrix.artifact_name }}"
#            rm -rf ./build_target
#          fi
#          if [[ "${{ matrix.go_os }}" == "windows" ]]; then
#            env CGO_ENABLED=0 GOOS=${{ matrix.go_os }} GOARCH=${{ matrix.os_arch }} go build -ldflags "-s -w" -o "${{ matrix.artifact_name }}"
#          fi

      - name: Upload client artifact
        uses: actions/upload-artifact@v4
        with:
          name: meshagent-windows-build
          path: |
            "**/bin/Release/*.exe"
          if-no-files-found: warn
          retention-days: 30
          compression-level: 9
