name: MeshAgent Build and Push Latest

permissions:
  contents: write
  packages: write
  actions: write
  pull-requests: write
  attestations: write
  id-token: write

on:
  push:
    branches: [master, feature/update-macos-signing-pipeline]
    paths-ignore:
      - "**/*.md"
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release (e.g., v1.2.3)"
        required: true
        type: string

env:
  REGISTRY: "ghcr.io"
  ORGANISATION: ${{ github.repository_owner }}
  REPOSITORY: ${{ github.event.repository.name }}
  BINARY_NAME: meshagent

# =============================================================================
# JOBS
# =============================================================================

jobs:
  build_client:
    name: "Build C Client (${{ matrix.os }})"
    runs-on: ${{ matrix.os }}
    if: |
      github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "macOS x86-64"
            os: macos-13
            os_arch: x86-64
            archid: 16
            artifact_name: meshagent_osx-x86-64
          - name: "macOS ARM64"
            os: macos-latest
            os_arch: arm64
            archid: 29
            artifact_name: meshagent_osx-arm-64
          - name: "Windows x64"
            os: windows-latest
            os_arch: x64
            archid: 4
            artifact_name: meshagent-windows-x64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup MSBuild
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v2
      
      - name: Setup Visual Studio Build Tools
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.os_arch }}      

      - name: Install macOS Dependencies
        if: runner.os == 'macOS'
        run: brew install openssl jpeg zlib
        shell: bash
      
      - name: Build MeshAgent for Windows ${{ matrix.os_arch }} with MSBuild
        if: matrix.os == 'windows-latest'
        run: msbuild MeshAgent-2022.sln -p:Configuration=Release -p:Platform=${{ matrix.os_arch }} -p:WindowsTargetPlatformVersion=10.0.26100.0
        shell: cmd

      - name: Build MeshAgent for macOS ${{ matrix.os_arch }}
        if: runner.os == 'macOS'
        run: |
          echo "Building MeshAgent for macOS ${{ matrix.os_arch }}"
          make macos ARCHID=${{ matrix.archid }}
        shell: bash

      - name: Prepare Artifacts
        shell: bash
        run: |
          mkdir -p artifacts
          
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            if [[ -f "Release/MeshService64.exe" ]]; then
              cp "Release/MeshService64.exe" "artifacts/${{ env.BINARY_NAME }}.exe"
              echo "Copied Windows binary"
            else
              echo "MeshService64.exe not found, checking available files:"
              find . -name "*.exe" -type f | head -10
              exit 1
            fi
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            if [[ "${{ matrix.os_arch }}" == "arm64" ]]; then
              BUILT_BINARY_NAME="meshagent_osx-arm-64"
            elif [[ "${{ matrix.os_arch }}" == "x86-64" ]]; then
              BUILT_BINARY_NAME="meshagent_osx-x86-64"
            else
              echo "Unknown macOS architecture: ${{ matrix.os_arch }}"
              exit 1
            fi
            if [[ -f "$BUILT_BINARY_NAME" ]]; then
              cp "$BUILT_BINARY_NAME" "artifacts/${{ env.BINARY_NAME }}"
              echo "Copied macOS binary: $BUILT_BINARY_NAME"
            else
              echo "$BUILT_BINARY_NAME not found"
              ls -la meshagent* || echo "No meshagent files found"
              exit 1
            fi
          else
            echo "Unsupported OS: ${{ runner.os }}"
            exit 1
          fi
          
          echo "Artifacts prepared:"
          ls -la artifacts/          

      - name: Upload client artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            artifacts/
          if-no-files-found: warn
          retention-days: 30
          compression-level: 9

  create_universal_macos:
    name: "Create Universal macOS Binary"
    needs: [build_client]
    runs-on: macos-latest
    if: |
      (github.event_name == 'push' || github.event_name == 'workflow_dispatch') &&
      !failure() && !cancelled()
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download macOS x86-64 Binary
        uses: actions/download-artifact@v4
        with:
          name: meshagent_osx-x86-64
          path: x64-artifacts/

      - name: Download macOS ARM64 Binary
        uses: actions/download-artifact@v4
        with:
          name: meshagent_osx-arm-64
          path: arm64-artifacts/

      - name: Create Universal Binary
        run: |
          echo "Creating universal macOS binary with lipo..."
          X64_BINARY="x64-artifacts/${{ env.BINARY_NAME }}"
          ARM64_BINARY="arm64-artifacts/${{ env.BINARY_NAME }}"
          
          mkdir -p artifacts
          lipo -create "$X64_BINARY" "$ARM64_BINARY" -output ./artifacts/${{ env.BINARY_NAME }}
          
          # Verify universal binary
          echo "Universal binary info:"
          lipo -info ./artifacts/${{ env.BINARY_NAME }}
          file ./artifacts/${{ env.BINARY_NAME }}
          
      - name: Sign MacOS package
        uses: ./.github/steps/sign-macos-package
        with:
          apple_certificate_p12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          apple_certificate_password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          apple_developer_id: ${{ secrets.APPLE_DEVELOPER_ID }}
          apple_id_username: ${{ secrets.APPLE_ID_USERNAME }}
          apple_id_password: ${{ secrets.APPLE_ID_PASSWORD }}
          apple_team_id: ${{ secrets.APPLE_TEAM_ID }}
          binary_name: ${{ env.BINARY_NAME }}

      - name: Upload Universal Binary
        uses: actions/upload-artifact@v4
        with:
          name: meshagent-macos-universal
          path: artifacts/
          retention-days: 30
          compression-level: 9